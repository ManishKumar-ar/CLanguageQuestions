// lower triangular in row wise in c
#include<stdio.h> 
#include<stdlib.h>

struct Matrix
{
    int *A;
    int n;
};

void Set(struct Matrix *m, int i, int j, int x)
{
    if (i >= j)
        m->A[i*(i-1)/2+j-1] = x;
}

int Get(struct Matrix m, int i, int j)
{
    if (i >= j)
        return m.A[i*(i-1)/2+j-1];
    else 
        return 0;
}

void Display(struct Matrix m)
{
    int i, j;
    for (i = 1; i <= m.n; i++)
    {
        for (j = 1; j <= m.n; j++)
        {
            if (i >= j)
                printf("%d ", m.A[i*(i-1)/2+j-1]);
            else
                printf("0 ");
        }
        printf("\n");
    }
}

int main()
{
    struct Matrix m;
    int i, j, x;
    printf("Enter Dimension: ");
    scanf("%d", &m.n);
    m.A = (int *)malloc(m.n * (m.n + 1) / 2 * sizeof(int));
    printf("Enter all elements:\n");
    for (i = 1; i <= m.n; i++)
    {
        for (j = 1; j <= m.n; j++)
        {
            scanf("%d", &x);
            Set(&m, i, j, x);
        }
    }
    printf("\n\n");
    Display(m);
    free(m.A); // Free allocated memory
    return 0;
}

/// output -------------------------------------------------------------------------------------------------------------------------------
Enter Dimension: 4
Enter all elements:
2 0 0 0
1 3 0 0
1 2 3 0
1 2 3 4


2 0 0 0
1 3 0 0
1 2 3 0
1 2 3 4


Enter Dimension: 4
Enter all elements:
1 2 3 4
5 6 7 8
9 8 7 6
3 2 1 4


1 0 0 0
5 6 0 0
9 8 7 0
3 2 1 4






// lower triangular in row wise in c++

#include <iostream>
using namespace std;

class LowerTriangular
{
private:
    int size;
    int *A;

public:
    // Constructor
    LowerTriangular(int n)
    {
        size = n;
        A = new int[size * (size + 1) / 2];
    }

    // Set element at (i, j)
    void set(int i, int j, int x)
    {
        if (i >= j)
        {
            int index = ((i * (i - 1)) / 2) + j - 1;
            A[index] = x;
        }
    }

    // Get element at (i, j)
    int get(int i, int j)
    {
        if (i >= j)
        {
            int index = ((i * (i - 1)) / 2) + j - 1;
            return A[index];
        }
        else
            return 0;
    }

    // Display the lower triangular matrix
    void display()
    {
        for (int i = 1; i <=size; i++)
        {
            for (int j = 1; j <= size; j++)
            {
                if (i >= j)
                {
                    int index = ((i * (i - 1)) / 2) + j - 1;       
                    cout << A[index]<<" ";
                }
                else
                {
                    cout << "0 ";
                }
            }
            cout << endl;
        }
    }

    // Destructor
    ~LowerTriangular()
    {

        delete[] A;
    }
};

int main()
{
    int n;
    cout << "Enter size of lower triangular matrix: ";
    cin >> n;

    LowerTriangular lt(n);

    cout << "Enter elements of lower triangular matrix: " << endl;
    for (int i =1; i <= n; i++)
    {
        for (int j = 1; j <= n; j++)
        {
            int x;
            cin >> x;
            lt.set(i, j, x);
        }
    }

    cout << "Lower triangular matrix:" << endl;
    lt.display();

    return 0;
}

//output ------------------------------------------------------------------------------------------

Enter size of lower triangular matrix: 4
Enter elements of lower triangular matrix: 
1 2 3 1
4 5 6 7
8 5 3 2
5 5 6 8
Lower triangular matrix:
1 0 0 0 
4 5 0 0 
8 5 3 0 
5 5 6 8



Enter size of lower triangular matrix: 4
Enter elements of lower triangular matrix: 
1 0 0 0
2 3 0 0
4 5 6 0
7 8 9 1
Lower triangular matrix:
1 0 0 0 
2 3 0 0 
4 5 6 0 
7 8 9 1 
