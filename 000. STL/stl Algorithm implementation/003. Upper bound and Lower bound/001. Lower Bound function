// work only on the sorted elements
//time complexity is => O( log n )  ==> divide the array into half

//lower bound -. It is used to find the first element in a sorted range that is not less than a specified value. 
Time Complexity: O(log n): Because std::lower_bound uses binary search, the time complexity is logarithmic in terms of the size of the range
Space Complexity: O(1):


#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

int main()
{
    vector<int> vec = {10, 20, 30, 40, 45, 65, 78, 80, 90};
    int target = 35;

    auto it = lower_bound(vec.begin(), vec.end(), target);

    cout << &it << endl;
    cout << "Value at lower bound: " << *it << endl;
    cout << "Address of the element: " << &(*it) << endl;


    cout << &vec[40] << endl;
    cout << &vec[30] << endl;

    return 0;
}

//output
// 0x61fee8
// Value at lower bound: 40
// Address of the element: 0x1006d5c
// 0x1006df0
// 0x1006dc8
