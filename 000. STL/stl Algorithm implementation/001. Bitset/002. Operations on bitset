bitset is not a data type, its a container.
memeory allocation is continous

operations => 
all(): Retrun true when all the bits are set to 1, otherwise false
any(): Retrun true when at least one bits are set to 1, otherwise false
count(): Returns the number of set bits (bits with value 1) in the bitset.
flip(index): Flips the bit at the specified index.
set(index): Sets the bit at the specified index to 1.
reset(index): Sets the bit at the specified index to 0.
test(index): Returns the value of the bit at the specified index (0 or 1).
size(): Returns the number of bits in the bitset.
operator[]: Accesses the bit at the specified index.




1. 
#include <iostream>
#include <bitset>
using namespace std;
int main()
{
    bitset<8> bt1;

    if (bt1.all())
    {
        cout << "All bits are set to 1." << std::endl;
    }
    else
    {
        cout << "Not all bits are set to 1." << std::endl;
    }

bitset<8> bits(255); // All bits set to 1

    if (bits.all())
    {
        cout << "All bits are set to 1." << std::endl;
    }
    else
    {
        cout << "Not all bits are set to 1." << std::endl;
    }

    return 0;
}

//outptu 
// Not all bits are set to 1.
// All bits are set to 1.



2.
#include <iostream>
#include <bitset>

using namespace std;

int main() {
    bitset<8> bits(10);          // Some bits set to 1

   cout<<bits<<endl;
                            // Check if any bit is set  
    if (bits.any()) {
        cout << "At least one bit is set to 1." << endl;
    } else {
        cout << "No bits are set to 1." << endl;
    }

    return 0;
}
//outptu 
// 00001010
// At least one bit is set to 1.



3.
#include <iostream>
#include <bitset>

using namespace std;

int main() {
    bitset<8> bits(170); // Binary representation: 10101010

    cout<<bits<<endl;

    // Count the number of set bits
    int numSetBits = bits.count();

    cout << "Number of set bits: " << numSetBits << endl; // Output: 4

    return 0;
}



//outptu 
// 10101010
// Number of set bits: 4


4.
#include <iostream>
#include <bitset>
using namespace std;
int main() {
    bitset<8> bits(170);    // Binary representation: 10101010

    cout << "Original bits: " << bits << endl;

                                 // Flip all the bits
    bits.flip();

    cout << "Flipped bits: " << bits << endl;

    return 0;
}
//output
//Original bits: 10101010
//Flipped bits: 01010101



5.
#include <iostream>
#include <bitset>
using namespace std;
int main() {
    bitset<8> bits; 

    cout<<bits<<endl;

    if (bits.none()) {
        cout << "None of the bits are set to 1." << endl;
    } else {
        cout << "At least one bit is set to 1." << endl;
    }

    return 0;
}

//outptu 
// 00000000
// None of the bits are set to 1




6.
#include <iostream>
#include <bitset>
using namespace std;
int main() {
    bitset<8> bits;                      // Initialize a bitset with 8 bits, all initially set to 0

    cout << "Original bits: " << bits << endl;

                                                   // Set all the bits to 1
    bits.set();

    cout << "Bits after setting: " << bits << endl;

    return 0;
}
//output
Original bits: 00000000
Bits after setting: 11111111




7.
#include <iostream>
#include <bitset>
using namespace std;
int main() {
    bitset<8> bits; // Initialize a bitset with 8 bits, all initially set to 0

    cout << "Original bits: " << bits << endl;

    bits.set(2);
// After calling bits.set(2), the bit at index 2 (counting from the right, starting from 0) is set to 1.

    cout << "Bits after setting: " << bits << endl;

    return 0;
}

//output
// Original bits: 00000000
// Bits after setting: 00000100



8.
#include <iostream>
#include <bitset>
using namespace std;
int main() {
    bitset<8> bits(255); 
    cout << "Original bits: " << bits << endl;

    bits.set(2,0);  /// set the bit 0 at the index 2 from the right side
 
    cout << "Bits after setting: " << bits << endl;

    return 0;
}

//output
// Original bits: 11111111
// Bits after setting: 11111011




9.
#include <iostream>
#include <bitset>

using namespace std;

int main() {
    bitset<8> bits; // Initialize a bitset with 8 bits, all initially set to 0

    // Output the size of the bitset
    cout << "Size of bitset: " << bits.size() << endl;

    return 0;
}
//output
//size of bitset: 8




10.
#include <iostream>
#include <bitset>
using namespace std;
int main() {
    bitset<8> bits(10); 

    cout<<bits<<endl;

                                               // Check if bit at index 3 is set
    bool bitValue = bits.test(3);            // Returns true because bit at index 3 is set

    if (bitValue) {
        cout << "Bit at index 3 is set (1)." << endl;
    } else {
        cout << "Bit at index 3 is not set (0)." << endl;
    }

    return 0;
}

//output
// 00001010
// Bit at index 3 is set (1).

