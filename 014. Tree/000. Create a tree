//time complexity for creation of the tree is = 2n + 1 ==> O( n )
//n ==> internal node + n ==> external node  + 1 (for null level)
// for n = 7, there are 15 activation record.
//size of stack ==> height + 2 

//height of tree can ==> logn ---- n


#include <iostream>
#include <queue>

using namespace std;

class Node
{
public:
    int data;
    Node *lchild;
    Node *rchild;

} *root = new Node;
void create()
{
    int data;
    Node *next, *p, *temp;
    int x;

    queue<Node *> q;
    cout << "Enter root elements :";
    cin >> x;

    root = new Node;
    root->data = x;
    root->lchild = root->rchild = 0;
    q.push(root);

    while (!q.empty())
    {
       
        p = q.front();
        q.pop();
         
        cout << "Enter left child of :"<<p->data <<": ";
        cin >> x;

        if (x != -1)
        {
            temp = new Node;
            temp->data = x;
            temp->lchild = 0;
            temp->rchild = 0;
            p->lchild = temp;
            q.push(temp);
        }

        cout << "Enter right child of:"<<p->data<<": ";
        cin >> x;

        if (x != -1)
        {
            temp = new Node;
            temp->data = x;
            temp->lchild = 0;
            temp->rchild = 0;
            p->rchild = temp;
            q.push(temp);
        }
    }
}
void preorder(Node *p)
{
    if (p)
    {
        cout << p->data << " ";
        preorder(p->lchild);
        preorder(p->rchild);
    }
}

int main()
{
    create();
    preorder(root);
}
