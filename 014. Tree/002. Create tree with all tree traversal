#include <iostream>
#include <queue>

using namespace std;

class Node
{
public:
    int data;
    Node *lchild;
    Node *rchild;

    Node(int data)
    {
        this->data = data;
        this->lchild = nullptr;
        this->rchild = nullptr;
    }
};

Node *root = nullptr;

void create()
{
    int data;
    queue<Node *> q;

    cout << "Enter root element: ";
    cin >> data;

    root = new Node(data);
    q.push(root);

    while (!q.empty())
    {
        Node *p = q.front();
        q.pop();

        cout << "Enter left child of " << p->data << ": ";
        cin >> data;
        if (data != -1)
        {
            p->lchild = new Node(data);
            q.push(p->lchild);
        }

        cout << "Enter right child of " << p->data << ": ";
        cin >> data;
        if (data != -1)
        {
            p->rchild = new Node(data);
            q.push(p->rchild);
        }
    }
}

void preOrder(Node *node)
{
    if (node)
    {
        cout << node->data << " ";
        preOrder(node->lchild);
        preOrder(node->rchild);
    }
}

void inOrder(Node *node)
{
    if (node)
    {
        inOrder(node->lchild);
        cout << node->data << " ";
        inOrder(node->rchild);
    }
}

void postOrder(Node *node)
{
    if (node)
    {
        postOrder(node->lchild);
        postOrder(node->rchild);
        cout << node->data << " ";
    }
}

int main()
{
    create();

    cout << "Preorder Traversal: ";
    preOrder(root);
    cout << endl;

    cout << "Inorder Traversal: ";
    inOrder(root);
    cout << endl;

    cout << "Postorder Traversal: ";
    postOrder(root);
    cout << endl;

    return 0;
}

//output
Enter root element: 1
Enter left child of 1: 2
Enter right child of 1: 3
Enter left child of 2: 4
Enter right child of 2: 5
Enter left child of 3: -1
Enter right child of 3: 6
Enter left child of 4: -1
Enter right child of 4: -1
Enter left child of 5: -1
Enter right child of 5: -1
Enter left child of 6: -1
Enter right child of 6: -1

Preorder Traversal: 1 2 4 5 3 6 
Inorder Traversal: 4 2 5 1 3 6 
Postorder Traversal: 4 5 2 6 3 1 
