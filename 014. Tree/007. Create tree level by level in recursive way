#include <iostream>
#include <queue>
#include <stdio.h>
#include <stdlib.h>
using namespace std;

struct Node
{
    struct Node *lchild;
    int data;
    struct Node *rchild;
}*root;

void LevelOrder(struct Node *root, int level)
{
    if (root == nullptr || level < 1)
        return;

    if (level == 1)
    {
        cout << root->data << " ";
    }
    else if (level > 1)
    {
        LevelOrder(root->lchild, level - 1);
        LevelOrder(root->rchild, level - 1);
    }
}

int height(struct Node* node)
{
    if (node == nullptr)
        return 0;
    else
    {
        /* compute the height of each subtree */
        int lheight = height(node->lchild);
        int rheight = height(node->rchild);

        /* use the larger one */
        if (lheight > rheight)
            return(lheight + 1);
        else return(rheight + 1);
    }
}

void LevelOrderTraversal(struct Node *root)
{
    int h = height(root);
    for (int i = 1; i <= h; i++)
    {
        LevelOrder(root, i);
    }
}

void Treecreate()
{
    struct Node *p, *t;
    int x;

    printf("Enter root value ");
    scanf("%d", &x);
    root = (struct Node *)malloc(sizeof(struct Node));
    root->data = x;
    root->lchild = root->rchild = NULL;

    queue<struct Node *> q;
    q.push(root);

    while (!q.empty())
    {
        p = q.front();
        q.pop();

        printf("Enter left child of %d ", p->data);
        scanf("%d", &x);
        if (x != -1)
        {
            t = (struct Node *)malloc(sizeof(struct Node));
            t->data = x;
            t->lchild = t->rchild = NULL;
            p->lchild = t;
            q.push(t);
        }

        printf("Enter right child of %d ", p->data);
        scanf("%d", &x);
        if (x != -1)
        {
            t = (struct Node *)malloc(sizeof(struct Node));
            t->data = x;
            t->lchild = t->rchild = NULL;
            p->rchild = t;
            q.push(t);
        }
    }
}

int main()
{
    Treecreate();
    LevelOrderTraversal(root);
    return 0;
}


//output
Enter root value 1
Enter left child of 1 2
Enter right child of 1 3
Enter left child of 2 4
Enter right child of 2 5
Enter left child of 3 -1
Enter right child of 3 6
Enter left child of 4 -1
Enter right child of 4 -1
Enter left child of 5 -1
Enter right child of 5 -1
Enter left child of 6 -1
Enter right child of 6 -1
1 2 3 4 5 6
