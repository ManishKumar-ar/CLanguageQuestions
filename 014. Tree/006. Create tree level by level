#include <iostream>
#include <queue>
#include <stack>
using namespace std;
class Node
{
public:
    int data;
    Node *lchild;
    Node *rchild;

} *root = new Node;
void create()
{
    int data;
    Node *next, *p, *temp;
    int x;

    queue<Node *> q;
    cout << "Enter root elements :";
    cin >> x;

    root = new Node;
    root->data = x;
    root->lchild = root->rchild = 0;
    q.push(root);

    while (!q.empty())
    {

        p = q.front();
        q.pop();

        cout << "Enter left child of :" << p->data << ": ";
        cin >> x;

        if (x != -1)
        {
            temp = new Node;
            temp->data = x;
            temp->lchild = 0;
            temp->rchild = 0;
            p->lchild = temp;
            q.push(temp);
        }

        cout << "Enter right child of:" << p->data << ": ";
        cin >> x;

        if (x != -1)
        {
            temp = new Node;
            temp->data = x;
            temp->lchild = 0;
            temp->rchild = 0;
            p->rchild = temp;
            q.push(temp);
        }
    }
}

void LevelOrder(struct Node *root)
{
    if (root == nullptr)
        return;

    queue<Node *> q;
    q.push(root);

    while (!q.empty())
    {
        root = q.front();
        q.pop();

        cout << root->data << " ";

        if (root->lchild)
            q.push(root->lchild);

        if (root->rchild)
            q.push(root->rchild);
    }
}

int main()
{
    create();
    LevelOrder(root);
}

//output -->
// Enter root elements :10
// Enter left child of :10: 15
// Enter right child of:10: 20
// Enter left child of :15: 1
// Enter right child of:15: 2
// Enter left child of :20: 3
// Enter right child of:20: 4
// Enter left child of :1: -1
// Enter right child of:1: -1
// Enter left child of :2: -1
// Enter right child of:2: -1
// Enter left child of :3: -1
// Enter right child of:3: -1
// Enter left child of :4: -1
// Enter right child of:4: -1
// 10 15 20 1 2 3 4
