#include <algorithm>
#include <vector>
#include <iostream>
using namespace std;
int firstOccurence(vector<int> vec, int target)
{
    int low = 0;
    int high = vec.size() - 1;
    int first = -1;

    while (low <= high)
    {
        int mid = (low + high) / 2;

        if (vec[mid] == target)
        {
            first = mid;
            high = mid - 1;
        }
        else if (vec[mid] > target)
        {
            high = mid - 1;
        }
        else
        {
            low = mid + 1;
        }
    }

    return first;
}
int lastOccurence(vector<int> vec, int target)
{
    int low = 0;
    int high = vec.size() - 1;
    int first = -1;

    while (low <= high)
    {
        int mid = (low + high) / 2;

        if (vec[mid] == target)
        {
            first = mid;
            low = mid + 1;
        }
        else if (vec[mid] > target)
        {
            high = mid - 1;
        }
        else
        {
            low = mid + 1;
        }
    }

    return first;
}
pair<int, int> firstandlastOccurrence(vector<int> vec, int n, int k)
{
    int first = firstOccurence(vec, k);
    if (first == -1)
        return {-1, -1};
    int last = lastOccurence(vec, k);
    return {first, last};
}
int count(vector<int> &vec, int n, int x)
{

    pair<int, int> ans = firstandlastOccurrence(vec, n, x);
    if (ans.first == -1)
        return 0;
    return ans.second - ans.first + 1;
}

int main()
{
    vector<int> vec = {2, 4, 6, 8, 8, 8, 11, 13};

    int result = count(vec, 8, 8);
    cout << "The number of occurrences is: " << result << "\n";
}

//output
// The number of occurrences is: 3

