// in the we also have the duplicates elements in the array.
//so we have to tell only the element is present or not.
// yes or no
//time complexity -
//avg ===> O(logn)
//worst ===> O( n / 2)       when there are lots of duplicates elements in the array.


#include<iostream>
#include<vector>
using namespace std;

bool searchInARotatedSortedArray(vector<int>&arr, int key) {
   int low =0;
   int high = arr.size() -1;
   while(low<= high)
   {
       int mid = (low + high) / 2;

       if(arr[mid]==key)
       return true;

       if(arr[low]==arr[mid]&&arr[high]==arr[mid])
       {
           low++;
           high--;
           continue;

       }
       if(arr[low]<=arr[mid])
       {
           if(arr[low]<= key &&key <=arr[mid ])
           {
               high = mid -1;
           }
           else
           {
               low = mid +1;
           }

       }
       else{

            if(arr[mid]<= key &&key <=arr[high ])
           {
            
            low = mid +1;
           }
           else
           {
               high = mid -1;
               
           }

       }
   }
   return false;
}

int main()
{
    vector<int > arr ={7, 8, 1, 2, 3, 3, 3, 4, 5, 6};
    bool result = searchInARotatedSortedArray(arr, 3);
    cout<<"Key is present: " <<result;
}

//ouput 
// Key is present: 1
