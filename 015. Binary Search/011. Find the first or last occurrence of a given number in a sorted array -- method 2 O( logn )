#include <iostream>
#include <vector>
#include <array>
using namespace std;

int lowerbound(vector<int> &arr, int n, int target)
{
    int low = 0;
    int high = n - 1;

    int answer = arr.size();
    while (low <= high)
    {
        int mid = low + (high - low) / 2;
        if (target <= arr[mid])
        {
            high = mid - 1;
            answer = mid;
        }
        else
        {
            low = mid + 1;
        }
    }
    return answer;
}

int upperbound(vector<int> &arr, int n, int target)
{
    int low = 0;
    int high = n - 1;
    int answer = arr.size();
    while (low <= high)
    {
        int mid = low + (high - low) / 2;
        if (target < arr[mid])
        {
            high = mid - 1;
            answer = mid;
        }
        else
        {
            low = mid + 1;
        }
    }
    return answer;
}

pair<int, int> firstAndLastPosition(vector<int> &arr, int n, int k)
{
    int lb = lowerbound(arr, n, k);
    if (lb == n || arr[lb] != k)
        return {-1, -1};
    return {lb, upperbound(arr, n, k) - 1};
}

int main()
{
    vector<int> arr = {3, 4, 13, 13, 13, 20, 40};
    pair<int, int> result = firstAndLastPosition(arr, arr.size(), 13);
    cout << "Range of 13 is: " << result.first << " - "<<result.second;
}
//output 
// Range of 13 is: 2 - 4
