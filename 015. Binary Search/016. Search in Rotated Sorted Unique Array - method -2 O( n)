#include <iostream>
#include <vector>
using namespace std;
int search(vector<int> &arr, int n, int target)
{
    int low = 0;
    int high = n - 1;

    while (low <= high)
    {
        int mid = (low + high) / 2;

        if (arr[mid] == target)
            return mid;

        // left sorted
        if (arr[low] <= arr[mid])
        {
            if (arr[low] <= target && target <= arr[mid])
            {
                // if this true then we want to eliminate the right half
                high = mid - 1;
            }
            else
            {
                // if this is false. that means target is  on the right hand side
                low = mid + 1;
            }
        }
        else // right sorted
        {
            if (arr[mid] <= target && target <= arr[high])
            {
                // left porition is eliminted b/c target lies on right half
                low = mid +1;
            }
            else
            {
                // right porition is eliminated
                high = mid - 1;
            }
        }
    }

    return -1;
}

int main()
{
    vector<int> vec = {12, 15, 18, 2, 4};
    int result = search(vec, 5, 2);
    cout << "At index: " << result;
}

// output
//  At index: 3




........................................................................
//another 

#include <bits/stdc++.h>
using namespace std;

int search(vector<int>& arr, int n, int k) {
    int low = 0, high = n - 1;
    while (low <= high) {
        int mid = (low + high) / 2;

        //if mid points the target
        if (arr[mid] == k) return mid;

        //if left part is sorted:
        if (arr[low] <= arr[mid]) {
            if (arr[low] <= k && k <= arr[mid]) {
                //element exists:
                high = mid - 1;
            }
            else {
                //element does not exist:
                low = mid + 1;
            }
        }
        else { //if right part is sorted:
            if (arr[mid] <= k && k <= arr[high]) {
                //element exists:
                low = mid + 1;
            }
            else {
                //element does not exist:
                high = mid - 1;
            }
        }
    }
    return -1;
}

int main()
{
    vector<int> arr = {7, 8, 9, 1, 2, 3, 4, 5, 6};
    int n = 9, k = 1;
    int ans = search(arr, n, k);
    if (ans == -1)
        cout << "Target is not present.\n";
    else
        cout << "The index is: " << ans << "\n";
    return 0;
}


