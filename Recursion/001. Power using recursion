#include<iostream>
using namespace std;

 int power(int m, int n)
{ 
    if (n == 0)
        return 1;
    return power(m, n - 1) * m;                             // in this for n = 5 there is 6calls   - so this take   O(n) time
}


int power1(int m, int n)                                       /// so we implement this fuction to reduce the time complexity 
{
    if (n == 0)                                                   // this funtion takes O( log n )
        return 1;
    if (n % 2 == 0)
        return power1(m * m, n / 2);
    return  m * power1(m * m, (n - 1) / 2);
}
int main()
{
    int r = power1(2, 5);
    printf("%d ", r);
    return 0;
}


///output ---------------------------------------------------------------------------------------------------------------------------------------
32





..................................................................................................................................................................................
/// if you look carefully in the code then you see here also the time complexity is O(n)  b/c we call the same pow( m, n/2) for two times then its lead to the same complexity.
// how can we write the code so that it we have to call only one time pow( m , n/2) function.

#include <iostream> 
using namespace std;

int pow(int m, int n)
{
    if (n == 0)
        return 1;

    int result = pow(m, n / 2) + pow(m, n / 2);                           // here we write it b/c x^10 = x^5 * x^5          when n is even

    if (result / 2 != 0)                                                 // when x^11 == x * x^5 * x^5                     when n is odd 
    {
        result = m * result;                                             // here we mutliply it b/c ====   n is odd
    }
    return result;

    
}

int main()
{
    int m = 2;
    int n = 6;
    int result = pow(m, n);
    cout << result;
}

// output
//  64



..................................................................................................................................................................................
// how can we write the code so that it we have to call only one time pow( m , n/2) function.

//  answer  - we call the 1st time the pow ( m ,n/2 ) funciton then store its result to a variable then we make the square of that variable. 
#include <iostream> 
using namespace std;

int pow(int m, int n)
{
    if (n == 0)
        return 1;

    int temp = pow(m, n / 2);
    int result = temp * temp;

    if (n % 2 != 0)
    {
        result *= m;
    }

    return result;
}

int main()
{
    int m = 2;
    int n = 10;
    int result = pow(m, n);
    cout << result;
}

//output 
//1024




