Given an array of integers: [1, 2, 1, 3, 2] and we are given some queries: [1, 3, 4, 2, 10]. 
For each query, we need to find out how many times the number appears in the array.
For example, if the query is 1 our answer would be 2, and if the query is 4 the answer will be 0. 

// note - time complexity is = O ( n )   for just one call
// for each query, we are calling this function. So, if the query contains 5 numbers and we call the function 5 times, the total time complexity will be O(5*N). 
//If the number of queries is Q, the time complexity will be O(Q*N). 

//We know from our previous knowledge that 108 operations take 1 second to get executed. 
//So, 1010 operations will take around 100 seconds(1010/108). We cannot say a code is good if it takes 100 seconds to get executed.
 
#include <iostream>
#include <algorithm>
#include <cmath>

using namespace std;
int find(int arr[], int n, int x)
{
    int cnt = 0;
    for (int i = 0; i < n; i++)
    {
        if (arr[i] == x)
            cnt++;
    }
    return cnt;
}

int main()
{
    int arr[5] = {1, 2, 3, 1, 5};
    int key = 1;
    int cnt = find(arr, 5, key);
    cout << key << " occures in the array at " << cnt << " times";
}

//output 
// 1 occures in the array at 2 times
