//Time Complexity: O(N*N)
//Space Complexity:  O(N)

#include <bits/stdc++.h>
using namespace std;
 
void countFreq(int arr[], int n)
{
    vector<bool> visited(n, false);
 
    for (int i = 0; i < n; i++) {
 
        // Skip this element if already processed
        if (visited[i] == true)
            continue;
 
        // Count frequency
        int count = 1;
        for (int j = i + 1; j < n; j++) {
            if (arr[i] == arr[j]) {
                visited[j] = true;
                count++;
            }
        }
        cout << arr[i] << " --> " << count << endl;
    }
}
 
int main()
{
    int arr[] = {10,5,10,15,10,5};
    int n = sizeof(arr) / sizeof(arr[0]);
    countFreq(arr, n);
    return 0;
}

//output 
// 10 --> 3
// 5 --> 2
// 15 --> 1




//note -

Current Program:
The previous program used nested loops to iterate through the array and count the frequency of each element.
It had a time complexity of O(n^2), where n is the size of the array.
This approach checks every element against every other element, which is not efficient, especially for larger arrays.


Previous Program:
In the current program, the find function directly iterates through the array once and counts the occurrences of the specified element x. 
It has a time complexity of O(n), where n is the size of the array. This approach is more efficient than the previous one since it only requires a single pass through the array.
