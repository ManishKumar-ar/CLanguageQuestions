// merging is a process of combining two sorted linked list.
//merging  by   -  1. with array  -> need of 3 arrays 
//                 2. with linked list -> need of 2 linked list only
//
//time taken === O( m + n )



#include <iostream>
#include <vector>
using namespace std;

class Node
{
public:
    int data;
    Node *next;
} *first = nullptr, *second = nullptr, *third = nullptr;

void create(const vector<int> A, Node *&first)
{
    if (A.empty())
        return;
    first = new Node;
    first->data = A[0];
    first->next = nullptr;

    Node *last;
    last = first;

    for (int i = 1; i < A.size(); i++)
    {
        Node *t = new Node;
        t->data = A[i];
        t->next = nullptr;
        last->next = t;
        last = t;
    }
}

void Merge()
{
    Node *last;
    if (first->data < second->data)
    {
        third = last = first;
        first = first->next;
    }
    else
    {
        third = last = second;
        second = second->next;
    }
    while (first != nullptr && second != nullptr)
    {
        if (first->data < second->data)
        {
            last->next = first;
            last = first;
            first = first->next;
        }
        else
        {
            last->next = second;
            last = second;
            second = second->next;
        }
    }
    if (first != nullptr)
        last->next = first;
    else
        last->next = second;
}

void Display(const Node *p)
{
    while (p != nullptr)
    {
        cout << p->data << "-> ";
        p = p->next;
    }
    cout << endl;
}

int main()
{
    vector<int> A = {3, 5, 7, 7, 10, 10, 15};
    vector<int> B = {2, 50, 70, 70, 100, 100, 150};

    create(A, first);
    create(B, second);

    Merge();

    Display(third);

    return 0;
}


//output 
// 2-> 3-> 5-> 7-> 7-> 10-> 10-> 15-> 50-> 70-> 70-> 100-> 100-> 150->
