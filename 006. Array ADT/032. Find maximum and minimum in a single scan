#include <iostream>
using namespace std;
int main()
{
  int A[10] = {5, 8, 3, 9, 6, 2, 10, 7, -1, 4};                     // here the elements are unsorted 
  int min = A[0];
  int max = A[0];

  for (int i = 1; i < 10; i++)
  {
    if (A[i] < min)
      min = A[i];
    else if (A[i] > max)
    {
      max = A[i];
    }
  }
  cout << "max = " << max << endl;
  cout << "min = " << min << endl;
}




..................................................................................................



#include <iostream>
using namespace std;
int main()
{
    int A[10] = {10,9,8,7,6,5,4,3,2,1};            //here the elements is sorted in descending order 
    int min=A[0];
    int max=A[0];

    for(int i=1;i<10;i++)
    {
        if (A[i]<min)                             // this condiition is always true, so it take  n-1 comparison
          min=A[i];
        else if (A[i] >max)
        {
           max=A[i];
        }

    }
    cout<<"max = "<<max<<endl;
    cout<<"min = "<<min<<endl;
   
}



....................................................................................................................................
// in the below code - the total number of comparion take place   = 2 ( n - 1)


#include <iostream>
using namespace std;
int main()
{
    int A[10] = {1,2,3,4,5,6,7,8,9,10};                         // here the elements is sorted in ascending order
    int min=A[0];
    int max=A[0];

    for(int i=1;i<10;i++)
    {
        if (A[i]<min)                                    /// 1st condiition is check, we know that is always fail but here n -1 comparison takes place
          min=A[i];
        else if (A[i] >max)                       /// this condiiton is always true, but here also take place n - 1 comparison 
        {
           max=A[i];
        }

    }
    cout<<"max = "<<max<<endl;
    cout<<"min = "<<min<<endl;
   
}

..........................................................
#include <iostream>
using namespace std;
int main()
{
  int A[10] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}; // here the elements is sorted in ascending order
  int min = A[0];
  int max = A[0];
  int countmin = 0;
  int countmax = 0;

  for (int i = 1; i < 10; i++)
  {
    if (A[i] < min) /// 1st condiition is check, we know that is always fail but here n -1 comparison takes place
    {
      min = A[i];
      countmin++;
    }
    else if (A[i] > max) /// this condiiton is always true, but here also take place n - 1 comparison
    {
      max = A[i];
      countmax++;
    }
  }
  cout << "max = " << max << endl;
  cout << "min = " << min << endl;
  cout << countmax << " " << countmin;
}

//output 
// max = 10
// min = 1
// 9 0



........................................................................................................................................................


#include <iostream>
using namespace std;
int main()
{
  int A[10] = {10, 9, 8, 7, 6, 5, 4, 3, 2, 1}; // here the elements is sorted in descending order
  int min = A[0];
  int max = A[0];
  int countmin = 0;
  int countmax = 0;

  for (int i = 1; i < 10; i++)
  {
    if (A[i] < min) // this condiition is always true, so it take  n-1 comparison
    {
      min = A[i];
      countmin++;
    }
    else if (A[i] > max)
    {
      max = A[i];
      countmax++;
    }
  }
  cout << "max = " << max << endl;
  cout << "min = " << min << endl;
  cout << countmax << " " << countmin;


}

//output 
// max = 10
// min = 1
// 0 9





.......................................................................................................................................

#include <iostream>
using namespace std;
int main()
{
  int A[10] = {5, 8, 3, 9, 6, 2, 10, 7, -1, 4};
  int min = A[0];
  int max = A[0];
  int countmin = 0;
  int countmax = 0;

  for (int i = 1; i < 10; i++)
  {
    if (A[i] < min)
    {
      min = A[i];
      countmin++;
    }
    else if (A[i] > max)
    {
      max = A[i];
      countmax++;
    }
  }
  cout << "max = " << max << endl;
  cout << "min = " << min << endl;
  cout << countmax << " " << countmin;
}

//output 
// max = 10
// min = -1
// 3 3
