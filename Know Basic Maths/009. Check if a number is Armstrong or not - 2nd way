// here we check the total number in the given then after we make it power of that tolal number and check
//
// Time Complexity: O(n) where n is the number of digits since we need to traverse every digit and add digits raised to power no. of digits to sum.
// Space Complexity: O(1) since no extra space is required


#include <iostream>
#include <algorithm>
#include <cmath>

using namespace std;

int armstrong(int n) {
    int sum = 0;
    int original = n;
    int numDigits = 0;
    
    // Count the number of digits in the number
    while (original != 0) {
        original /= 10;
        numDigits++;
    }
    
    // Reset original to the initial value of n
    original = n;
    
    // Calculate the sum of each digit raised to the power of the number of digits
    while (original != 0) {
        int digit = original % 10;
        sum += pow(digit, numDigits);
        original /= 10;
    }
    
    return sum;
}

int main() {
    int n = 1634;
    int result = armstrong(n);
    
    if (result == n) {
        cout << "Number is Armstrong";
    } else {
        cout << "Not";
    }
    
    return 0;
}

//output 
//Number is Armstrong
