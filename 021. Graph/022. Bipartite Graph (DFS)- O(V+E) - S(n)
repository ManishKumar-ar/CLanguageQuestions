#include <vector>
#include <iostream>

using namespace std;

class Solution {
private:
    bool dfs(int node, int col, int color[], vector<vector<int>>& graph) {
        color[node] = col;

     for (int i = 0; i < graph[node].size(); ++i) {
    int it = graph[node][i];
    
    // if uncoloured
    if (color[it] == -1) {
        if (dfs(it, !col, color, graph) == false) return false;
    }
    // if previously coloured and have the same colour
    else if (color[it] == col) {
        return false;
    }
}
        return true;
    }

public:
    bool isBipartite(vector<vector<int>>& graph) {
        int n = graph.size();
        int color[n];
        for (int i = 0; i < n; i++) {
            color[i] = -1;
        }

        for (int i = 0; i < n; i++) {
            if (color[i] == -1) {
                if (dfs(i, 0, color, graph) == false) return false;
            }
        }
        return true;
    }
};

int main() {
    Solution solution;
    // Example usage
    vector<vector<int>> graph = {
        {1, 3},
        {0, 2},
        {1, 3},
        {0, 2}
    };

    if (solution.isBipartite(graph)) {
        cout << "The graph is bipartite." << endl;
    } else {
        cout << "The graph is not bipartite." << endl;
    }

    return 0;
}


//output
// The graph is bipartite.
