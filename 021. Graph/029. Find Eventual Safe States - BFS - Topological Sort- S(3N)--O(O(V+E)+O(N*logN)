#include <iostream>
#include <vector>
#include <queue>
#include <algorithm>

using namespace std;

class Solution {
public:
    vector<int> eventualSafeNodes(vector<vector<int>>& graph) {
        int n = graph.size();

        vector<int> adjRev[n];
        vector<int> indegree(n, 0);

        for(int i = 0; i < n; i++) {
            for(int j = 0; j < graph[i].size(); j++) {
                adjRev[graph[i][j]].push_back(i);
                indegree[i]++;
            }
        }

        queue<int> q;
        vector<int> safeNodes;
        for(int i = 0; i < n; i++) {
            if(indegree[i] == 0) {
                q.push(i);
            }
        }

        while(!q.empty()) {
            int node = q.front();
            q.pop();
            safeNodes.push_back(node);
            for(auto it: adjRev[node]) {
                indegree[it]--;
                if(indegree[it] == 0) {
                    q.push(it);
                }
            }
        }

        sort(safeNodes.begin(), safeNodes.end());
        return safeNodes;
    }
};

int main() {
   
    vector<vector<int>> graph = {
        {1, 2},     // Node 0 has edges to node 1 and node 2
        {2, 3},     // Node 1 has edges to node 2 and node 3
        {5},        // Node 2 has an edge to node 5
        {0},        // Node 3 has an edge to node 0
        {5},        // Node 4 has an edge to node 5
        {},         // Node 5 has no edges
        {}          // Node 6 has no edges
    };


    Solution solution;

   
    vector<int> safeNodes = solution.eventualSafeNodes(graph);

    
    cout << "Safe nodes: ";
    for (int node : safeNodes) {
        cout << node << " ";
    }
    cout << endl;
}
