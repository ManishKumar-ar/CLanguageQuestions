#include <iostream>
#include <vector>
using namespace std;

void traversals(vector<vector<int>> &adj, int root, int vis[])
{
    vis[root] = 1;
    // cout << root << " ";
    for (int i = 0; i < adj[root].size(); i++)
    {
        int adjacentNode = adj[root][i];
        if (vis[adjacentNode] == 0)
        {
            traversals(adj, adjacentNode, vis);
        }
    }
}

int lists(vector<vector<int>> adj)
{
    int n = adj.size();
    vector<vector<int>> v(n);

    for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < n; j++)
        {
            if (adj[i][j] == 1 && i != j)
            {
                v[i].push_back(j);
            }
        }
    }

    cout << "Adjacency list is:" << endl;
    for (int i = 0; i < n; i++)
    {
        cout << i << ": ";
        for (int j = 0; j < v[i].size(); j++)
        {
            cout << v[i][j] << " ";
        }
        cout << endl;
    }

    int vis[n] = {0};
    int count = 0;

    for (int i = 0; i < n; i++)
    {
        if (!vis[i])
        {
            count++;
            traversals(v, i, vis);
        }
    }

    return count;
}

int main()
{
    vector<vector<int>> adj{
        {1, 0, 1},
        {0, 1, 0},
        {1, 0, 1}};

    int result = lists(adj);
    cout << "The total number of component in the graph are :  " << result;

    return 0;
}

//Output 
// Adjacency list is:
// 0: 2 
// 1: 
// 2: 0 
// the total number of component in the graph are :  2
