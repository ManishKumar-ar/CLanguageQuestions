#include <iostream>
#include <vector>
#include <queue>

using namespace std;

int orangeRotting(vector<vector<int>> grid) {
    int m = grid.size();
    int n = grid[0].size();
    
    queue<pair<pair<int, int>, int>> q;
    vector<vector<int>> vis(m, vector<int>(n, 0));
    int TotalFresh = 0;

    for (int i = 0; i < m; i++) {
        for (int j = 0; j < n; j++) {
            if(grid[i][j] == 2) {
                q.push({{i, j}, 0});
                vis[i][j] = 2;
            } else {
                vis[i][j] = 0;
            }
            if(grid[i][j] == 1) TotalFresh++;
        }
    }

    int time = 0;
    int drow[] = {-1, 0, 1, 0};
    int dcolumn[] = {0, 1, 0, -1};
    int count = 0;

    while(!q.empty()) {
        int r = q.front().first.first;
        int c = q.front().first.second;
        int t = q.front().second;
        q.pop();
        time = max(time, t);

        for(int i = 0; i < 4; i++) {
            int neighbourRow = r + drow[i];
            int neighbourColumn = c + dcolumn[i];

            if(neighbourRow >= 0 && neighbourRow < m && neighbourColumn >= 0 && neighbourColumn < n && vis[neighbourRow][neighbourColumn] == 0 && grid[neighbourRow][neighbourColumn] == 1) {
                q.push({{neighbourRow, neighbourColumn}, t + 1});
                vis[neighbourRow][neighbourColumn] = 2;
                count++;
            }
        }
    }

    if(count != TotalFresh) return -1;
    return time;
}

int main() {
    vector<vector<int>> v = {{2, 1, 1}, {1, 1, 0}, {0, 1, 1}};
    int rottenOrange = orangeRotting(v);
    cout << "Minimum time required to rot all oranges: " << rottenOrange << endl;
    return 0;
}


//output
//Minimum time required to rot all oranges: 4














////////////////////////////////////////////////////////////
//the best solution 
//
#include<bits/stdc++.h>
class Solution {
public:
    int orangesRotting(vector<vector<int>>& grid) {
        int n = grid.size();
        int m = grid[0].size();
        int tot = 0, cnt = 0;
        queue<pair<int, int>> q;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (grid[i][j] == 2)
                    q.push({i, j});
                if (grid[i][j] != 0)
                    tot++;
            }
        }
        int dx[4] = {0, 0, 1, -1};
        int dy[4] = {1, -1, 0, 0};
        int ans = 0;
        while (!q.empty()) {
            int k = q.size();
            cnt += k;
            while (k--) {
                int y = q.front().second, x = q.front().first;
                q.pop();
                for (int i = 0; i < 4; i++) {
                    int nx = x + dx[i], ny = y + dy[i];
                    if (nx < 0 || ny < 0 || nx >= n || ny >= m ||
                        grid[nx][ny] != 1)
                        continue;
                    grid[nx][ny] = 2;
                    q.push({nx, ny});
                }
            }
            if (!q.empty())
                ans++;
        }
        if (tot == cnt)
            return ans;
        return -1;
    }
};
