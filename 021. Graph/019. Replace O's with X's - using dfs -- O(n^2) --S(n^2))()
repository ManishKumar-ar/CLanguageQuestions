#include <vector>
#include <iostream>

using namespace std;

class Solution {
private:
    void dfs(int row, int col, vector<vector<int>> &vis, vector<vector<char>> &mat, int delrow[], int delcol[]) {
        vis[row][col] = 1;
        
        int m = mat.size();
        int n = mat[0].size();
        
        for (int i = 0; i < 4; i++) {
            int nrow = row + delrow[i];
            int ncol = col + delcol[i];
            
            if (nrow >= 0 && nrow < m && ncol >= 0 && ncol < n && !vis[nrow][ncol] && mat[nrow][ncol] == 'O') {
                dfs(nrow, ncol, vis, mat, delrow, delcol);
            }
        }
    }
    
public:
    vector<vector<char>> fill(int n, int m, vector<vector<char>> mat) {
        int delrow[] = {-1, 0, +1, 0};
        int delcol[] = {0, +1, 0, -1};
        
        vector<vector<int>> vis(n, vector<int>(m, 0));
        
        // Traverse the first and last row
        for (int j = 0; j < m; j++) {
            if (!vis[0][j] && mat[0][j] == 'O') {
                dfs(0, j, vis, mat, delrow, delcol);
            }
            if (!vis[n - 1][j] && mat[n - 1][j] == 'O') {
                dfs(n - 1, j, vis, mat, delrow, delcol);
            }
        }
        
        // Traverse the first and last column
        for (int i = 0; i < n; i++) {
            if (!vis[i][0] && mat[i][0] == 'O') {
                dfs(i, 0, vis, mat, delrow, delcol);
            }
            if (!vis[i][m - 1] && mat[i][m - 1] == 'O') {
                dfs(i, m - 1, vis, mat, delrow, delcol);
            }
        }
        
        // Replace all unvisited 'O' with 'X'
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (!vis[i][j] && mat[i][j] == 'O') {
                    mat[i][j] = 'X';
                }
            }
        }
        return mat;
    }
};

// Example usage
int main() {
    Solution sol;
    vector<vector<char>> mat = {
        {'X', 'O', 'X', 'X'},
        {'O', 'X', 'O', 'X'},
        {'X', 'X', 'O', 'O'},
        {'O', 'X', 'O', 'X'}
    };
    int n = mat.size();
    int m = mat[0].size();

    vector<vector<char>> result = sol.fill(n, m, mat);
    
    for (const auto& row : result) {
        for (char val : row) {
            cout << val << " ";
        }
        cout << endl;
    }

    return 0;
}
