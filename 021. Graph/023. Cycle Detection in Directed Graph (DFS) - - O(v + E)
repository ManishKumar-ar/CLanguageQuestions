#include <iostream>
#include <vector>

using namespace std;

class Solution {
private:
    bool dfs(int node, vector<int> adj[], int vis[], int pathsvis[]) {
        vis[node] = 1;
        pathsvis[node] = 1;

        for (auto it : adj[node]) {
            if (!vis[it]) {
                if (dfs(it, adj, vis, pathsvis) == true)
                    return true;
            } else if (pathsvis[it]) {
                return true;
            }
        }
        pathsvis[node] = 0;
        return false;
    }

public:
    // Function to detect cycle in a directed graph.
    bool isCyclic(int V, vector<int> adj[]) {
        int vis[V] = {0};
        int pathsvis[V] = {0};

        for (int i = 0; i < V; i++) {
            if (!vis[i]) {
                if (dfs(i, adj, vis, pathsvis) == true) return true;
            }
        }
        return false;
    }
};

int main() {
    Solution solution;

    // Example usage
    int V = 4; // Number of vertices
    vector<int> adj[V];

    // Define the directed graph
    adj[0].push_back(1);
    adj[1].push_back(2);
    adj[2].push_back(0);
    adj[2].push_back(3);

    if (solution.isCyclic(V, adj)) {
        cout << "The graph has a cycle." << endl;
    } else {
        cout << "The graph does not have a cycle." << endl;
    }

    return 0;
}
