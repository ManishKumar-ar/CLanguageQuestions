#include <iostream>
#include <vector>
#include <queue>

using namespace std;

class Solution {
public:
    // Function to return list containing vertices in Topological order. 
    vector<int> topoSort(int V, vector<int> adj[]) {
        int indegree[V] = {0};
        
        for (int i = 0; i < V; i++) {
            for (auto it : adj[i]) {
                indegree[it]++;
            }
        }
        
        queue<int> q;
        for (int i = 0; i < V; i++) {
            if (indegree[i] == 0)
                q.push(i);
        }
        
        vector<int> topo;
        
        while (!q.empty()) {
            int node = q.front();
            q.pop();
            
            topo.push_back(node);
            
            for (auto it : adj[node]) {
                indegree[it]--;
                if (indegree[it] == 0)
                    q.push(it);
            }
        }
        return topo;
    }
};

int main() {
    // Number of vertices
    int V = 6;
    
    // Adjacency list representation of the graph
    vector<int> adj[V];
    
    // Adding edges to the graph
    adj[5].push_back(2);
    adj[5].push_back(0);
    adj[4].push_back(0);
    adj[4].push_back(1);
    adj[2].push_back(3);
    adj[3].push_back(1);
    
    // Create a Solution object
    Solution sol;
    
    // Get the topological sort order
    vector<int> topoOrder = sol.topoSort(V, adj);
    
    // Print the topological sort order
    cout << "Topological Sort Order:" << endl;
    for (int i : topoOrder) {
        cout << i << " ";
    }
    cout << endl;
    
    return 0;
}

//output
Topological Sort Order:
4 5 0 2 3 1 
