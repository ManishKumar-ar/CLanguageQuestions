//space complexity == queue + bfs + vector == S(3n)
//time comlexity == O(vectex + 2*edges) == O( n )

#include <iostream>
#include <vector>
#include <queue>
using namespace std;

vector<int> bfsTraversal(int n, vector<vector<int>> &adj)
{
    int vis[n] = {0}; // Initializing visited array

    vis[0] = 1; // Marking the first node as visited

    queue<int> q; // Queue to store nodes for BFS traversal
    q.push(0);    // Starting BFS from node 0

    vector<int> bfs; // Vector to store BFS traversal result

    while (!q.empty())
    {
        int node = q.front();
        q.pop();
        bfs.push_back(node); // Adding current node to BFS result

        // Exploring adjacent nodes of the current node
        for (int i = 0; i < adj[node].size(); ++i)
        {
            int adjacentNode = adj[node][i];
         
            if (!vis[adjacentNode])
            {                          // If the adjacent node is not visited
                vis[adjacentNode] = 1; // Mark it as visited
                q.push(adjacentNode);  // Add it to the queue for further traversal
            }
        }
    }

    return bfs; // Returning the BFS traversal result
}

int main()
{
    int n = 6;                  // Number of nodes in the graph
    vector<vector<int>> adj(n); // Adjacency list representation of the graph

    // Adding edges to the graph
    adj[0] = {1, 2};
    adj[1] = {0, 3, 4};
    adj[2] = {0, 4};
    adj[3] = {1, 5};
    adj[4] = {1, 2, 5};
    adj[5] = {3, 4};

    // Calling BFS traversal function
    vector<int> result = bfsTraversal(n, adj);

    // Displaying BFS traversal result
    cout << "BFS Traversal: ";
    for (int node : result)
    {
        cout << node << " ";
    }
    cout << endl;

    return 0;
}

//output
//BFS Traversal: 0 1 2 3 4 5 












..............................................................................................................

#include <iostream>
#include <vector>
#include <queue>
using namespace std;

int BFS(vector<vector<int>> adj, int n)
{
    int visit[n] = {0};
    queue<int> q;
    int starting_node = 0;
    q.push(starting_node);
    visit[starting_node] = 1;

    while (!q.empty())
    {
        int node = q.front();
        q.pop();
        cout << node << " ";

        for (int i = 0; i < adj[node].size(); i++)
        {
            int padosi = adj[node][i];

            if (!visit[padosi])
            {
                q.push(padosi);
                visit[padosi] =1;

            }
        }
    }

 
}
int main()
{
    vector<vector<int>> adj(8);

    adj[0] = {1, 2};
    adj[1] = {0, 3, 4};
    adj[2] = {0, 5, 6};
    adj[3] = {4};
    adj[4] = {1, 7};
    adj[5] = {2, 7};
    adj[6] = {2};
    adj[7] = {4, 5};

    BFS(adj, 8);
}
