#include <iostream>
#include <vector>

using namespace std;

class Solution {
private:
    bool dfs(int source, int parent, vector<int> adj[], int vis[])
    {
        vis[source] = 1;
        
        for(auto adjacentNode : adj[source])
        {
            if(!vis[adjacentNode])
            {
                if(dfs(adjacentNode, source, adj, vis) == true)
                    return true;
            }
            else if(parent != adjacentNode)
            {
                return true;
            }
        }
        return false;
    }

public:
    // Function to detect cycle in an undirected graph.
    bool isCycle(int V, vector<int> adj[]) {
        int vis[V] = {0};
        
        for(int i = 0; i < V; i++)
        {
            if(!vis[i])
            {
                if(dfs(i, -1, adj, vis))
                    return true;
            }
        }
        return false;
    }
};

int main() {
    // Number of vertices
    int V = 5;

    // Adjacency list representation of the graph
    vector<int> adj[V];
    
    // Adding edges
    adj[0].push_back(1);
    adj[1].push_back(0);

    adj[1].push_back(2);
    adj[2].push_back(1);

    adj[2].push_back(3);
    adj[3].push_back(2);

    adj[3].push_back(4);
    adj[4].push_back(3);

    adj[4].push_back(1);  // This edge creates a cycle
    adj[1].push_back(4);

    // Create an instance of the Solution class
    Solution sol;

    // Call the isCycle method and print the result
    if (sol.isCycle(V, adj)) {
        cout << "Graph contains cycle" << endl;
    } else {
        cout << "Graph does not contain cycle" << endl;
    }

    return 0;
}
