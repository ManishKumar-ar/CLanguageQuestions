#include <iostream>
#include <vector>
#include <queue>

using namespace std;

class Solution {
 private:
    bool detect(int source, vector<int> adj[], int vis[])
    {
        vis[source] = 1;
        queue<pair<int, int>> q;
        q.push({source,-1});
        
        while(!q.empty())
        {
            int node = q.front().first;
            int parent = q.front().second;
            q.pop();
            
            for(int i=0;i<adj[node].size();i++)
            {
                int adjacentNode = adj[node][i];
                if(!vis[adjacentNode])
                {
                    vis[adjacentNode] = 1;
                    q.push({adjacentNode,node});
                }
                else if( parent != adjacentNode)
                {
                    return true;
                }
            }
        }
        
        return false;
        
        
    }
  public:
    // Function to detect cycle in an undirected graph.
    bool isCycle(int V, vector<int> adj[]) {
        
        int vis[V] = {0};
        
        for( int i=0; i<V; i++)
        {
            if(!vis[i])
            {
                if(detect(i,adj,vis)) return true;
            }
            
        }
        // Code here
        return false;
    }
};

int main() {
    // Number of vertices
    int V = 5;

    // Adjacency list representation of the graph
    vector<int> adj[V];
    
    // Adding edges
    adj[0].push_back(1);
    adj[1].push_back(0);

    adj[1].push_back(2);
    adj[2].push_back(1);

    adj[2].push_back(3);
    adj[3].push_back(2);

    adj[3].push_back(4);
    adj[4].push_back(3);

    adj[4].push_back(1);  
    adj[1].push_back(4);


    Solution sol;

  
    if (sol.isCycle(V, adj)) {
        cout << "Graph contains cycle" << endl;
    } else {
        cout << "Graph does not contain cycle" << endl;
    }

    return 0;
}
