#include <iostream>
#include <vector>

using namespace std;

class Solution {
    private:
    void dfs(int row, int col, vector<vector<int>>& ans, vector<vector<int>>& image, int newColor, int delrow[],int delcol[], int initialColor)
    {
        ans[row][col] = newColor;
        int n = image.size();
        int m = image[0].size();

        for( int i =0;i<4;i++)
        {
            int neighrow = row + delrow[i];
            int neighcol = col + delcol[i];

       
            if (neighrow >= 0 && neighrow < n && neighcol >= 0 && neighcol < m && image[neighrow][neighcol] == initialColor && ans[neighrow][neighcol] != newColor) {
                dfs(neighrow, neighcol, ans, image, newColor, delrow, delcol, initialColor);
            }
        }


    }
public:
    vector<vector<int>> floodFill(vector<vector<int>>& image, int sr, int sc, int newcolor) {
        int initialColor = image[sr][sc];

        vector<vector<int>> ans = image;

        int delrow[]={-1,0,+1,0};
        int delcol[]={0,+1,0,-1};

        dfs(sr, sc, ans , image, newcolor, delrow, delcol, initialColor);
        return ans;

    
        
    }
};


void printImage(const vector<vector<int>>& image) {
    for (const auto& row : image) {
        for (int pixel : row) {
            cout << pixel << " ";
        }
        cout << endl;
    }
}

int main() {
    vector<vector<int>> image = {
        {1, 1, 1},
        {1, 1, 0},
        {1, 0, 1}
    };

    int sr = 1, sc = 1, newColor = 2;

    Solution sol;
    vector<vector<int>> result = sol.floodFill(image, sr, sc, newColor);

    cout << "Flood filled image:\n";
    printImage(result);

    return 0;
}

//output
// Flood filled image:
// 2 2 2 
// 2 2 0 
// 2 0 1 
