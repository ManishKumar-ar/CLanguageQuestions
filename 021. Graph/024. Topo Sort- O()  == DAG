
#include <iostream>
#include <vector>
#include <stack>

using namespace std;

class Solution {
private:
    void dfs(int node, int vis[], stack<int>& st, vector<int> adj[]) {
        vis[node] = 1;
        for (auto it : adj[node]) {
            if (!vis[it])
                dfs(it, vis, st, adj);
        }
        st.push(node);
    }
public:
    // Function to return list containing vertices in Topological order. 
    vector<int> topoSort(int V, vector<int> adj[]) {
        int vis[V] = {0};
        stack<int> st;
        
        for (int i = 0; i < V; i++) {
            if (!vis[i]) {
                dfs(i, vis, st, adj);
            }
        }
        
        vector<int> ans;
        while (!st.empty()) {
            ans.push_back(st.top());
            st.pop();
        }
        return ans;
    }
};

int main() {
    // Number of vertices
    int V = 6;
    
    // Adjacency list representation of the graph
    vector<int> adj[V];
    
    // Adding edges to the graph
    adj[5].push_back(2);
    adj[5].push_back(0);
    adj[4].push_back(0);
    adj[4].push_back(1);
    adj[2].push_back(3);
    adj[3].push_back(1);
    
    // Create a Solution object
    Solution sol;
    
    // Get the topological sort order
    vector<int> topoOrder = sol.topoSort(V, adj);
    
    // Print the topological sort order
    cout << "Topological Sort Order:" << endl;
    for (int i : topoOrder) {
        cout << i << " ";
    }
    cout << endl;
    
    return 0;
}


//output
Topological Sort Order:
5 4 2 3 1 0 
